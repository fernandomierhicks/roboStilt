// Generated by gencpp from file robostilt_common/SetPositionRequest.msg
// DO NOT EDIT!


#ifndef ROBOSTILT_COMMON_MESSAGE_SETPOSITIONREQUEST_H
#define ROBOSTILT_COMMON_MESSAGE_SETPOSITIONREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robostilt_common
{
template <class ContainerAllocator>
struct SetPositionRequest_
{
  typedef SetPositionRequest_<ContainerAllocator> Type;

  SetPositionRequest_()
    : indexes()
    , absolute()
    , positions()
    , velocities()
    , efforts_limit_upper()
    , efforts_limit_lower()
    , effort_fault_expected()  {
    }
  SetPositionRequest_(const ContainerAllocator& _alloc)
    : indexes(_alloc)
    , absolute(_alloc)
    , positions(_alloc)
    , velocities(_alloc)
    , efforts_limit_upper(_alloc)
    , efforts_limit_lower(_alloc)
    , effort_fault_expected(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _indexes_type;
  _indexes_type indexes;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _absolute_type;
  _absolute_type absolute;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _positions_type;
  _positions_type positions;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _velocities_type;
  _velocities_type velocities;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _efforts_limit_upper_type;
  _efforts_limit_upper_type efforts_limit_upper;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _efforts_limit_lower_type;
  _efforts_limit_lower_type efforts_limit_lower;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _effort_fault_expected_type;
  _effort_fault_expected_type effort_fault_expected;





  typedef boost::shared_ptr< ::robostilt_common::SetPositionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robostilt_common::SetPositionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetPositionRequest_

typedef ::robostilt_common::SetPositionRequest_<std::allocator<void> > SetPositionRequest;

typedef boost::shared_ptr< ::robostilt_common::SetPositionRequest > SetPositionRequestPtr;
typedef boost::shared_ptr< ::robostilt_common::SetPositionRequest const> SetPositionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robostilt_common::SetPositionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robostilt_common::SetPositionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robostilt_common

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'robostilt_common': ['/home/fernandomierhicks/robostilt/src/robostilt_common/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robostilt_common::SetPositionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robostilt_common::SetPositionRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robostilt_common::SetPositionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robostilt_common::SetPositionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robostilt_common::SetPositionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robostilt_common::SetPositionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robostilt_common::SetPositionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "224669325a0559e10f29c0d0db91a535";
  }

  static const char* value(const ::robostilt_common::SetPositionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x224669325a0559e1ULL;
  static const uint64_t static_value2 = 0x0f29c0d0db91a535ULL;
};

template<class ContainerAllocator>
struct DataType< ::robostilt_common::SetPositionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robostilt_common/SetPositionRequest";
  }

  static const char* value(const ::robostilt_common::SetPositionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robostilt_common::SetPositionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
\n\
\n\
int32[] indexes\n\
bool[] absolute\n\
float64[] positions\n\
float64[] velocities\n\
float64[] efforts_limit_upper\n\
float64[] efforts_limit_lower\n\
bool[] effort_fault_expected\n\
";
  }

  static const char* value(const ::robostilt_common::SetPositionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robostilt_common::SetPositionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.indexes);
      stream.next(m.absolute);
      stream.next(m.positions);
      stream.next(m.velocities);
      stream.next(m.efforts_limit_upper);
      stream.next(m.efforts_limit_lower);
      stream.next(m.effort_fault_expected);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetPositionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robostilt_common::SetPositionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robostilt_common::SetPositionRequest_<ContainerAllocator>& v)
  {
    s << indent << "indexes[]" << std::endl;
    for (size_t i = 0; i < v.indexes.size(); ++i)
    {
      s << indent << "  indexes[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.indexes[i]);
    }
    s << indent << "absolute[]" << std::endl;
    for (size_t i = 0; i < v.absolute.size(); ++i)
    {
      s << indent << "  absolute[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.absolute[i]);
    }
    s << indent << "positions[]" << std::endl;
    for (size_t i = 0; i < v.positions.size(); ++i)
    {
      s << indent << "  positions[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.positions[i]);
    }
    s << indent << "velocities[]" << std::endl;
    for (size_t i = 0; i < v.velocities.size(); ++i)
    {
      s << indent << "  velocities[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.velocities[i]);
    }
    s << indent << "efforts_limit_upper[]" << std::endl;
    for (size_t i = 0; i < v.efforts_limit_upper.size(); ++i)
    {
      s << indent << "  efforts_limit_upper[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.efforts_limit_upper[i]);
    }
    s << indent << "efforts_limit_lower[]" << std::endl;
    for (size_t i = 0; i < v.efforts_limit_lower.size(); ++i)
    {
      s << indent << "  efforts_limit_lower[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.efforts_limit_lower[i]);
    }
    s << indent << "effort_fault_expected[]" << std::endl;
    for (size_t i = 0; i < v.effort_fault_expected.size(); ++i)
    {
      s << indent << "  effort_fault_expected[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.effort_fault_expected[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOSTILT_COMMON_MESSAGE_SETPOSITIONREQUEST_H
