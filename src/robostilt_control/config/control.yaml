#We need one FollowJointTrajectory controller to take advantage of the fully trajectorized motion (quintic splines) 
#One per actuator so different actuators can finish at different times and not all at the same time. 

robostilt:
  # Publish all joint states -----------------------------------
  joint_state_controller:
    type: joint_state_controller/JointStateController
    publish_rate: &publish_rate 50  

  # GAINS-------------------------------------------------------
  # i_clamp should be close to the maximum effort possible by the joint, to avoid windup.
  leg_pid_gains:
    p: &leg_p_default                   1000.0
    i: &leg_i_default                   15.0
    d: &leg_d_default                   50.0
    i_clamp: &leg_i_clamp_default       50.0
  third_frame_revolute_pid_gains:
    p: &revolute_p_default              1000.0
    i: &revolute_i_default              15.0
    d: &revolute_d_default              50.0
    i_clamp: &revolute_i_clamp_default  50.0
  third_frame_prismatic_pid_gains:
    p: &prismatic_p_default             1000.0
    i: &prismatic_i_default             15.0
    d: &prismatic_d_default             50.0
    i_clamp: &prismatic_i_clamp_default 50.0

  #CONSTRAINTS ---------------------------------------------------------------------------------------------
  constraints:

    #GOAL_TIME: If the timestamp of the goal trajectory point is t, then following the trajectory succeeds if it reaches the goal within t +/- goal_time, and aborts otherwise.
    #TRAJECTORY: tolerance for a particular joint throughout the trajectory. If the joint position ever falls outside trajectory_position +/- tolerance, then the trajectory aborts.
    #GOAL_POS: Position tolerance for a particular joint to reach the goal. When the joint is within goal_position +/- goal_tolerance, than the trajectory can succeed.
    #STOPPED_VELOCITY: Velocity to be considered approximately equal to zero.
    #STOP_TRAJECTORY_DURATION: When starting the controller or canceling a trajectory, position hold mode is entered. This parameter specifies the time it takes to bring the current state (position and velocity) to a stop. Its value can be greater or equal than zero.    
    goal_time: &time_fault                  1.00   #Time tolerance   
    trajectory: &trackingfault              0.05  #Tracking fault tolerance  
    goal_pos: &goal_pos                     0.001 #Position tolerance at end      
    stopped_velocity_tolerance: &stop_vel   0.0001   #  
    stop_trajectory_duration: &stop_time    0.0001

  # TRAJECTORY CONTROLLER---------------------------------------------------------------------------------
  # Fully trajectorized position over time, multiple joints and multiple positoins over time
  leg_2_trajectory_controller:
    type: "effort_controllers/JointTrajectoryController"
    state_publish_rate:  *publish_rate
    action_monitor_rate: *publish_rate
    constraints:
      goal_time:  *time_fault  
      stopped_velocity_tolerance: *stop_vel
      stop_trajectory_duration: *stop_time
      goal: *goal_pos 
      trajectory: *trackingfault 
    allow_partial_joints_goal: true 
    joints: 
      - leg_2
    gains:
      leg_2: {p: *leg_p_default, i: *leg_i_default, d: *leg_d_default, i_clamp: *leg_i_clamp_default} 

  leg_4_trajectory_controller:
    type: "effort_controllers/JointTrajectoryController"
    state_publish_rate:  *publish_rate
    action_monitor_rate: *publish_rate
    constraints:
      goal_time:  *time_fault  
      stopped_velocity_tolerance: *stop_vel
      stop_trajectory_duration: *stop_time
      goal: *goal_pos 
      trajectory: *trackingfault 
    allow_partial_joints_goal: true 
    joints: 
      - leg_4
    gains:
      leg_4: {p: *leg_p_default, i: *leg_i_default, d: *leg_d_default, i_clamp: *leg_i_clamp_default}     

  leg_6_trajectory_controller:
    type: "effort_controllers/JointTrajectoryController"
    state_publish_rate:  *publish_rate
    action_monitor_rate: *publish_rate
    constraints:
      goal_time:  *time_fault  
      stopped_velocity_tolerance: *stop_vel
      stop_trajectory_duration: *stop_time
      goal: *goal_pos 
      trajectory: *trackingfault 
    allow_partial_joints_goal: true 
    joints: 
      - leg_6
    gains:
      leg_6: {p: *leg_p_default, i: *leg_i_default, d: *leg_d_default, i_clamp: *leg_i_clamp_default}     


  leg_1_trajectory_controller:
    type: "effort_controllers/JointTrajectoryController"
    state_publish_rate:  *publish_rate
    action_monitor_rate: *publish_rate
    constraints:
      goal_time:  *time_fault  
      stopped_velocity_tolerance: *stop_vel
      stop_trajectory_duration: *stop_time
      goal: *goal_pos 
      trajectory: *trackingfault 
    allow_partial_joints_goal: true 
    joints: 
      - leg_1
    gains:
      leg_1: {p: *leg_p_default, i: *leg_i_default, d: *leg_d_default, i_clamp: *leg_i_clamp_default} 

  leg_3_trajectory_controller:
    type: "effort_controllers/JointTrajectoryController"
    state_publish_rate:  *publish_rate
    action_monitor_rate: *publish_rate
    constraints:
      goal_time:  *time_fault  
      stopped_velocity_tolerance: *stop_vel
      stop_trajectory_duration: *stop_time
      goal: *goal_pos 
      trajectory: *trackingfault 
    allow_partial_joints_goal: true 
    joints: 
      - leg_3
    gains:
      leg_3: {p: *leg_p_default, i: *leg_i_default, d: *leg_d_default, i_clamp: *leg_i_clamp_default}     

  leg_5_trajectory_controller:
    type: "effort_controllers/JointTrajectoryController"
    state_publish_rate:  *publish_rate
    action_monitor_rate: *publish_rate
    constraints:
      goal_time:  *time_fault  
      stopped_velocity_tolerance: *stop_vel
      stop_trajectory_duration: *stop_time
      goal: *goal_pos 
      trajectory: *trackingfault 
    allow_partial_joints_goal: true 
    joints: 
      - leg_5
    gains:
      leg_5: {p: *leg_p_default, i: *leg_i_default, d: *leg_d_default, i_clamp: *leg_i_clamp_default}     


  third_frame_prismatic_trajectory_controller:
    type: "effort_controllers/JointTrajectoryController"
    state_publish_rate:  *publish_rate
    action_monitor_rate: *publish_rate
    constraints:
      goal_time:  *time_fault  
      stopped_velocity_tolerance: *stop_vel
      stop_trajectory_duration: *stop_time
      goal: *goal_pos 
      trajectory: *trackingfault 
    allow_partial_joints_goal: true 
    joints: 
      -  third_frame_prismatic
    gains:
       third_frame_prismatic: {p: *leg_p_default, i: *leg_i_default, d: *leg_d_default, i_clamp: *leg_i_clamp_default} 


  third_frame_revolute_trajectory_controller:
    type: "effort_controllers/JointTrajectoryController"
    state_publish_rate:  *publish_rate
    action_monitor_rate: *publish_rate
    constraints:
      goal_time:  *time_fault  
      stopped_velocity_tolerance: *stop_vel
      stop_trajectory_duration: *stop_time
      goal: *goal_pos 
      trajectory: *trackingfault 
    allow_partial_joints_goal: true 
    joints: 
      -  third_frame_revolute
    gains:
       third_frame_revolute: {p: *leg_p_default, i: *leg_i_default, d: *leg_d_default, i_clamp: *leg_i_clamp_default} 


# Position Controller ---------------------------------------
  # 1DOF Position. Velocity limit in Gazebo or on joint_limits_interface. No further trajectorization
  leg_2_position_controller:
        # Manipulation does not get visible clamped on the topic /state/command, but gazebo does clamp it.         
        #     Manipulation type   Controlled variable
        type: effort_controllers/JointPositionController
      # type: effort_controllers/JointVelocityController
      # type: effort_controllers/JointEffortController
        joint: leg_2
        pid: 
          p: *leg_p_default
          i: *leg_i_default
          d: *leg_d_default
          i_clamp: *leg_i_clamp_default